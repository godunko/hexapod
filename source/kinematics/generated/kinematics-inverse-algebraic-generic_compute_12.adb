--
--  Copyright (C) 2023, Vadim Godunko
--
--  SPDX - License - Identifier: Apache - 2.0
--

procedure Kinematics.Inverse.Algebraic.Generic_Compute_12
  (E_X         : Reals.Real;
   E_Y         : Reals.Real;
   E_Z         : Reals.Real;
   Cos_Theta_3 : Reals.Real;
   Sin_Theta_3 : Reals.Real;
   Theta_1     : out Reals.Real;
   Theta_2     : out Reals.Real)
is

   use type Reals.Real;

   Cos_Theta_1 : constant Reals.Real :=
((Sin_Alpha_1 * Sin_Gamma_0 * e_y + Sin_Alpha_1 * Cos_Gamma_0 * e_x - B_y * Sin_Alpha_1 * Sin_Gamma_0 - B_x * Sin_Alpha_1 * Cos_Gamma_0) * e_z ** 2 + (((-2.0 * d_1 * Sin_Alpha_1 - 2.0 * B_z * Sin_Alpha_1) * Sin_Gamma_0 + 2.0 * R_1 * Cos_Alpha_1 * Cos_Gamma_0) * e_y + 
((-2.0 * d_1 * Sin_Alpha_1 - 2.0 * B_z * Sin_Alpha_1) * Cos_Gamma_0 - 2.0 * R_1 * Cos_Alpha_1 * Sin_Gamma_0) * e_x + (2.0 * B_y * d_1 * Sin_Alpha_1 + 2.0 * B_y * B_z * Sin_Alpha_1 + 2.0 * B_x * R_1 * Cos_Alpha_1) * Sin_Gamma_0 + (2.0 * B_x * d_1 * Sin_Alpha_1 + 2.0 * B_x * B_z * Sin_Alpha_1 - 2.0 * B_y * R_1 * Cos_Alpha_1) * Cos_Gamma_0) * e_z + Sin_Alpha_1 * Sin_Gamma_0 * e_y ** 3 + (Sin_Alpha_1 * Cos_Gamma_0 * e_x - 3.0 * B_y * Sin_Alpha_1 * Sin_Gamma_0 - B_x * Sin_Alpha_1 * Cos_Gamma_0) * e_y ** 2 + (Sin_Alpha_1 * Sin_Gamma_0 * e_x ** 2 + (-2.0 * B_x * Sin_Alpha_1 * Sin_Gamma_0 - 2.0 * B_y * Sin_Alpha_1 * Cos_Gamma_0) * e_x + 
(-2.0 * d_2 * R_3 * Sin_Alpha_1 * Sin_Alpha_2 * Sin_Gamma_0 - 2.0 * R_1 * R_3 * Sin_Alpha_2 * Cos_Gamma_0) * Sin_Theta_3 - 2.0 * R_2 * R_3 * Sin_Alpha_1 * Sin_Gamma_0 * Cos_Theta_3 + 
(-2.0 * d_2 * d_3 * Sin_Alpha_1 * Cos_Alpha_2 - R_3 ** 2 * Sin_Alpha_1 - R_2 ** 2 * Sin_Alpha_1 + R_1 ** 2 * Sin_Alpha_1 - d_3 ** 2 * Sin_Alpha_1 - d_2 ** 2 * Sin_Alpha_1 + d_1 ** 2 * Sin_Alpha_1 + 2.0 * B_z * d_1 * Sin_Alpha_1 + B_z ** 2 * Sin_Alpha_1 + 3.0 * B_y ** 2 * Sin_Alpha_1 + B_x ** 2 * Sin_Alpha_1) * Sin_Gamma_0 + 
(-2.0 * d_3 * R_1 * Cos_Alpha_2 + 2.0 * B_x * B_y * Sin_Alpha_1 + R_1 * (-2.0 * d_1 * Cos_Alpha_1 - 2.0 * B_z * Cos_Alpha_1 - 2.0 * d_2)) * Cos_Gamma_0) * e_y + Sin_Alpha_1 * Cos_Gamma_0 * e_x ** 3 + (-B_y * Sin_Alpha_1 * Sin_Gamma_0 - 3.0 * B_x * Sin_Alpha_1 * Cos_Gamma_0) * e_x ** 2 + ((2.0 * R_1 * R_3 * Sin_Alpha_2 * Sin_Gamma_0 - 2.0 * d_2 * R_3 * Sin_Alpha_1 * Sin_Alpha_2 * Cos_Gamma_0) * Sin_Theta_3 - 2.0 * R_2 * R_3 * Sin_Alpha_1 * Cos_Gamma_0 * Cos_Theta_3 + (2.0 * d_3 * R_1 * Cos_Alpha_2 + 2.0 * B_x * B_y * Sin_Alpha_1 + R_1 * (2.0 * d_1 * Cos_Alpha_1 + 2.0 * B_z * Cos_Alpha_1 + 2.0 * d_2)) * Sin_Gamma_0 + 
(-2.0 * d_2 * d_3 * Sin_Alpha_1 * Cos_Alpha_2 - R_3 ** 2 * Sin_Alpha_1 - R_2 ** 2 * Sin_Alpha_1 + R_1 ** 2 * Sin_Alpha_1 - d_3 ** 2 * Sin_Alpha_1 - d_2 ** 2 * Sin_Alpha_1 + d_1 ** 2 * Sin_Alpha_1 + 2.0 * B_z * d_1 * Sin_Alpha_1 + B_z ** 2 * Sin_Alpha_1 + B_y ** 2 * Sin_Alpha_1 + 3.0 * B_x ** 2 * Sin_Alpha_1) * Cos_Gamma_0) * e_x + 
(R_3 * (2.0 * B_y * d_2 * Sin_Alpha_1 - 2.0 * B_x * R_1) * Sin_Alpha_2 * Sin_Gamma_0 + R_3 * (2.0 * B_x * d_2 * Sin_Alpha_1 + 2.0 * B_y * R_1) * Sin_Alpha_2 * Cos_Gamma_0) * Sin_Theta_3 + (2.0 * B_y * R_2 * R_3 * Sin_Alpha_1 * Sin_Gamma_0 + 2.0 * B_x * R_2 * R_3 * Sin_Alpha_1 * Cos_Gamma_0) * Cos_Theta_3 + ((2.0 * B_y * d_2 * d_3 * Sin_Alpha_1 - 2.0 * B_x * d_3 * R_1) * Cos_Alpha_2 + B_y * R_3 ** 2 * Sin_Alpha_1 + B_y * R_2 ** 2 * Sin_Alpha_1 - B_y * R_1 ** 2 * Sin_Alpha_1 + B_y * d_3 ** 2 * Sin_Alpha_1 + B_y * d_2 ** 2 * Sin_Alpha_1 - B_y * d_1 ** 2 * Sin_Alpha_1 - 2.0 * B_y * B_z * d_1 * Sin_Alpha_1 - B_y * B_z ** 2 * Sin_Alpha_1 - B_y ** 3 * Sin_Alpha_1 - B_x ** 2 *
B_y * Sin_Alpha_1 + R_1 * (-2.0 * B_x * d_1 * Cos_Alpha_1 - 2.0 * B_x * B_z * Cos_Alpha_1 - 2.0 * B_x * d_2)) * Sin_Gamma_0 + ((2.0 * B_x * d_2 * d_3 * Sin_Alpha_1 + 2.0 * B_y * d_3 * R_1) * Cos_Alpha_2 + B_x * R_3 ** 2 * Sin_Alpha_1 + B_x * R_2 ** 2 * Sin_Alpha_1 - B_x * R_1 ** 2 * Sin_Alpha_1 + B_x * d_3 ** 2 * Sin_Alpha_1 + B_x * d_2 ** 2 *
Sin_Alpha_1 - B_x * d_1 ** 2 * Sin_Alpha_1 - 2.0 * B_x * B_z * d_1 * Sin_Alpha_1 - B_x * B_z ** 2 * Sin_Alpha_1 - B_x * B_y ** 2 * Sin_Alpha_1 - B_x ** 3 * Sin_Alpha_1 + R_1 * (2.0 * B_y * d_1 * Cos_Alpha_1 + 2.0 * B_y * B_z * Cos_Alpha_1 + 2.0 * B_y * d_2)) * Cos_Gamma_0)/((2.0 * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 + 2.0 * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_y ** 2 + (-4.0 * B_y * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 - 4.0 * B_y * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_y + (2.0 * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 + 2.0 * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_x ** 2 + 
(-4.0 * B_x * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 - 4.0 * B_x * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_x + R_1 * (2.0 * B_y ** 2 * Sin_Alpha_1 + 2.0 * B_x ** 2 * Sin_Alpha_1) * Sin_Gamma_0 ** 2 + R_1 * (2.0 * B_y ** 2 * Sin_Alpha_1 + 2.0 * B_x ** 2 * Sin_Alpha_1) * Cos_Gamma_0 ** 2);

   Sin_Theta_1 : constant Reals.Real :=
((Sin_Alpha_1 * Cos_Gamma_0 * e_y - Sin_Alpha_1 * Sin_Gamma_0 * e_x + B_x * Sin_Alpha_1 * Sin_Gamma_0 - B_y * Sin_Alpha_1 * Cos_Gamma_0) * e_z ** 2 + (((-2.0 * d_1 * Sin_Alpha_1 - 2.0 * B_z * Sin_Alpha_1) * Cos_Gamma_0 - 2.0 * R_1 * Cos_Alpha_1 * Sin_Gamma_0) * e_y + ((2.0 * d_1 * Sin_Alpha_1 + 2.0 * B_z * Sin_Alpha_1) * Sin_Gamma_0 - 2.0 * R_1 * Cos_Alpha_1 * Cos_Gamma_0) * e_x + (-2.0 * B_x * d_1 * Sin_Alpha_1 - 2.0 * B_x * B_z * Sin_Alpha_1 + 2.0 * B_y * R_1 * Cos_Alpha_1) * Sin_Gamma_0 + (2.0 * B_y * d_1 * Sin_Alpha_1 + 2.0 * B_y * B_z * Sin_Alpha_1 + 2.0 * B_x * R_1 * Cos_Alpha_1) * Cos_Gamma_0) * e_z + Sin_Alpha_1 * Cos_Gamma_0 * e_y ** 3 + (-Sin_Alpha_1 * Sin_Gamma_0 * e_x + B_x * Sin_Alpha_1 * Sin_Gamma_0 - 3.0 * B_y * Sin_Alpha_1 * Cos_Gamma_0) * e_y ** 2 + (Sin_Alpha_1 * Cos_Gamma_0 * e_x ** 2 + (2.0 * B_y * Sin_Alpha_1 * Sin_Gamma_0 - 2.0 * B_x * Sin_Alpha_1 * Cos_Gamma_0) * e_x + (2.0 * R_1 * R_3 * Sin_Alpha_2 * Sin_Gamma_0 - 2.0 * d_2 * R_3 * Sin_Alpha_1 * Sin_Alpha_2 * Cos_Gamma_0) * Sin_Theta_3 - 2.0 * R_2 * R_3 * Sin_Alpha_1 * Cos_Gamma_0 * Cos_Theta_3 + (2.0 * d_3 * R_1 * Cos_Alpha_2 - 2.0 * B_x * B_y * Sin_Alpha_1 + R_1 * (2.0 * d_1 * Cos_Alpha_1 + 2.0 * B_z * Cos_Alpha_1 + 2.0 * d_2)) * Sin_Gamma_0 + (-2.0 * d_2 * d_3 * Sin_Alpha_1 * Cos_Alpha_2 - R_3 ** 2 * Sin_Alpha_1 - R_2 ** 2 * Sin_Alpha_1 + R_1 ** 2 * Sin_Alpha_1 - d_3 ** 2 * Sin_Alpha_1 - d_2 ** 2 * Sin_Alpha_1 + d_1 ** 2 * Sin_Alpha_1 + 2.0 * B_z * d_1 * Sin_Alpha_1 + B_z ** 2 * Sin_Alpha_1 + 3.0 * B_y ** 2 * Sin_Alpha_1 + B_x ** 2 * Sin_Alpha_1) * Cos_Gamma_0) * e_y - Sin_Alpha_1 * Sin_Gamma_0 * e_x ** 3 + (3.0 * B_x * Sin_Alpha_1 * Sin_Gamma_0 - B_y * Sin_Alpha_1 * Cos_Gamma_0) * e_x ** 2 + ((2.0 * d_2 * R_3 * Sin_Alpha_1 * Sin_Alpha_2 * Sin_Gamma_0 + 2.0 * R_1 * R_3 * Sin_Alpha_2 * Cos_Gamma_0) * Sin_Theta_3 + 2.0 * R_2 * R_3 * Sin_Alpha_1 * Sin_Gamma_0 * Cos_Theta_3 + (2.0 * d_2 * d_3 * Sin_Alpha_1 * Cos_Alpha_2 + R_3 ** 2 * Sin_Alpha_1 + R_2 ** 2 * Sin_Alpha_1 - R_1 ** 2 * Sin_Alpha_1 + d_3 ** 2 * Sin_Alpha_1 + d_2 ** 2 * Sin_Alpha_1 - d_1 ** 2 * Sin_Alpha_1 - 2.0 * B_z * d_1 * Sin_Alpha_1 - B_z ** 2 * Sin_Alpha_1 - B_y ** 2 * Sin_Alpha_1 - 3.0 * B_x ** 2 * Sin_Alpha_1) * Sin_Gamma_0 + (2.0 * d_3 * R_1 * Cos_Alpha_2 + 2.0 * B_x * B_y * Sin_Alpha_1 + R_1 * (2.0 * d_1 * Cos_Alpha_1 + 2.0 * B_z * Cos_Alpha_1 + 2.0 * d_2)) * Cos_Gamma_0) * e_x + (R_3 * (-2.0 * B_x * d_2 * Sin_Alpha_1 - 2.0 * B_y * R_1) * Sin_Alpha_2 * Sin_Gamma_0 + R_3 * (2.0 * B_y * d_2 * Sin_Alpha_1 - 2.0 * B_x * R_1) * Sin_Alpha_2 * Cos_Gamma_0) * Sin_Theta_3 + (2.0 * B_y * R_2 * R_3 * Sin_Alpha_1 * Cos_Gamma_0 - 2.0 * B_x * R_2 * R_3 * Sin_Alpha_1 * Sin_Gamma_0) * Cos_Theta_3 + ((-2.0 * B_x * d_2 * d_3 * Sin_Alpha_1 - 2.0 * B_y * d_3 * R_1) * Cos_Alpha_2 - B_x * R_3 ** 2 * Sin_Alpha_1 - B_x * R_2 ** 2 * Sin_Alpha_1 + B_x * R_1 ** 2 * Sin_Alpha_1 - B_x * d_3 ** 2 * Sin_Alpha_1 - B_x * d_2 ** 2 * Sin_Alpha_1 + B_x * d_1 ** 2 * Sin_Alpha_1 + 2.0 * B_x * B_z * d_1 * Sin_Alpha_1 + B_x * B_z ** 2 * Sin_Alpha_1 + B_x * B_y ** 2 * Sin_Alpha_1 + B_x ** 3 * Sin_Alpha_1 + R_1 * (-2.0 * B_y * d_1 * Cos_Alpha_1 - 2.0 * B_y * B_z * Cos_Alpha_1 - 2.0 * B_y * d_2)) * Sin_Gamma_0 + ((2.0 * B_y * d_2 * d_3 * Sin_Alpha_1 - 2.0 * B_x * d_3 * R_1) * Cos_Alpha_2 + B_y * R_3 ** 2 * Sin_Alpha_1 + B_y * R_2 ** 2 * Sin_Alpha_1 - B_y * R_1 ** 2 * Sin_Alpha_1 + B_y * d_3 ** 2 * Sin_Alpha_1 + B_y * d_2 ** 2 * Sin_Alpha_1 - B_y * d_1 ** 2 * Sin_Alpha_1 - 2.0 * B_y * B_z * d_1 * Sin_Alpha_1 - B_y * B_z ** 2 * Sin_Alpha_1 - B_y ** 3 * Sin_Alpha_1 - B_x ** 2 * B_y * Sin_Alpha_1 + R_1 * (-2.0 * B_x * d_1 * Cos_Alpha_1 - 2.0 * B_x * B_z * Cos_Alpha_1 - 2.0 * B_x * d_2)) * Cos_Gamma_0)/((2.0 * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 + 2.0 * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_y ** 2 + (-4.0 * B_y * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 - 4.0 * B_y * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_y + (2.0 * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 + 2.0 * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_x ** 2 + (-4.0 * B_x * R_1 * Sin_Alpha_1 * Sin_Gamma_0 ** 2 - 4.0 * B_x * R_1 * Sin_Alpha_1 * Cos_Gamma_0 ** 2) * e_x + R_1 * (2.0 * B_y ** 2 * Sin_Alpha_1 + 2.0 * B_x ** 2 * Sin_Alpha_1) * Sin_Gamma_0 ** 2 + R_1 * (2.0 * B_y ** 2 * Sin_Alpha_1 + 2.0 * B_x ** 2 * Sin_Alpha_1) * Cos_Gamma_0 ** 2);

   Cos_Theta_2 : constant Reals.Real :=
((R_3 * Sin_Alpha_1 * Cos_Alpha_2 * Sin_Theta_3 - d_3 * Sin_Alpha_1 * Sin_Alpha_2) * e_z + ((R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Cos_Gamma_0 * Cos_Theta_1 - R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Sin_Gamma_0 * Sin_Theta_1) * Sin_Theta_3 + 
(R_3 * Cos_Gamma_0 * Sin_Theta_1 + R_3 * Sin_Gamma_0 * Cos_Theta_1) * Cos_Theta_3 + (d_3 * Cos_Alpha_1 * Sin_Alpha_2 * Sin_Gamma_0 + R_2 * Cos_Gamma_0) * Sin_Theta_1 + (R_2 * Sin_Gamma_0 - d_3 * Cos_Alpha_1 * Sin_Alpha_2 * Cos_Gamma_0) * Cos_Theta_1) * e_y + ((-R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Cos_Gamma_0 * Sin_Theta_1 - R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Sin_Gamma_0 * Cos_Theta_1) * Sin_Theta_3 + (R_3 * Cos_Gamma_0 * Cos_Theta_1 - R_3 * Sin_Gamma_0 * Sin_Theta_1) * Cos_Theta_3 + (d_3 * Cos_Alpha_1 * Sin_Alpha_2 * Cos_Gamma_0 - R_2 * Sin_Gamma_0) *
Sin_Theta_1 + (d_3 * Cos_Alpha_1 * Sin_Alpha_2 * Sin_Gamma_0 + R_2 * Cos_Gamma_0) * Cos_Theta_1) * e_x + 
((B_y * R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Sin_Gamma_0 + B_x * R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Cos_Gamma_0) * Sin_Theta_1 + (B_x * R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Sin_Gamma_0 - B_y * R_3 * Cos_Alpha_1 * Cos_Alpha_2 * Cos_Gamma_0) * Cos_Theta_1 + (-d_1 - B_z) * R_3 * Sin_Alpha_1 * Cos_Alpha_2) *
Sin_Theta_3 + ((B_x * R_3 * Sin_Gamma_0 - B_y * R_3 * Cos_Gamma_0) * Sin_Theta_1 + (-B_y * R_3 * Sin_Gamma_0 - B_x * R_3 * Cos_Gamma_0) * Cos_Theta_1 - R_1 * R_3) * Cos_Theta_3 + 
((B_x * R_2 - B_y * d_3 * Cos_Alpha_1 * Sin_Alpha_2) * Sin_Gamma_0 + (-B_x * d_3 * Cos_Alpha_1 * Sin_Alpha_2 - B_y * R_2) * Cos_Gamma_0) * Sin_Theta_1 + ((-B_x * d_3 * Cos_Alpha_1 * Sin_Alpha_2 - B_y * R_2) * Sin_Gamma_0 + (B_y * d_3 * Cos_Alpha_1 * Sin_Alpha_2 - B_x * R_2) * Cos_Gamma_0) * Cos_Theta_1 + 
(d_1 + B_z) * d_3 * Sin_Alpha_1 * Sin_Alpha_2 - R_1 * R_2)/(R_3 ** 2 * Cos_Alpha_2 ** 2 * Sin_Theta_3 ** 2 - 2.0 * d_3 * R_3 * Cos_Alpha_2 * Sin_Alpha_2 * Sin_Theta_3 + R_3 ** 2 * Cos_Theta_3 ** 2 + 2.0 * R_2 * R_3 * Cos_Theta_3 + d_3 ** 2 * Sin_Alpha_2 ** 2 + R_2 ** 2);

   Sin_Theta_2 : constant Reals.Real :=
((R_3 * Sin_Alpha_1 * Cos_Theta_3 + R_2 * Sin_Alpha_1) * e_z + ((-R_3 * Cos_Alpha_2 * Cos_Gamma_0 * Sin_Theta_1 - R_3 * Cos_Alpha_2 * Sin_Gamma_0 * Cos_Theta_1) * Sin_Theta_3 + (R_3 * Cos_Alpha_1 * Cos_Gamma_0 * Cos_Theta_1 - R_3 * Cos_Alpha_1 * Sin_Gamma_0 * Sin_Theta_1) * Cos_Theta_3 + 
(d_3 * Sin_Alpha_2 * Cos_Gamma_0 - R_2 * Cos_Alpha_1 * Sin_Gamma_0) * Sin_Theta_1 + (d_3 * Sin_Alpha_2 * Sin_Gamma_0 + R_2 * Cos_Alpha_1 * Cos_Gamma_0) * Cos_Theta_1) * e_y + ((R_3 * Cos_Alpha_2 * Sin_Gamma_0 * Sin_Theta_1 - R_3 * Cos_Alpha_2 * Cos_Gamma_0 * Cos_Theta_1) * Sin_Theta_3 + 
(-R_3 * Cos_Alpha_1 * Cos_Gamma_0 * Sin_Theta_1 - R_3 * Cos_Alpha_1 * Sin_Gamma_0 * Cos_Theta_1) * Cos_Theta_3 + (-d_3 * Sin_Alpha_2 * Sin_Gamma_0 - R_2 * Cos_Alpha_1 * Cos_Gamma_0) * Sin_Theta_1 + (d_3 * Sin_Alpha_2 * Cos_Gamma_0 - R_2 * Cos_Alpha_1 * Sin_Gamma_0) * Cos_Theta_1) * e_x + 
((B_y * R_3 * Cos_Alpha_2 * Cos_Gamma_0 - B_x * R_3 * Cos_Alpha_2 * Sin_Gamma_0) * Sin_Theta_1 + (B_y * R_3 * Cos_Alpha_2 * Sin_Gamma_0 + B_x * R_3 * Cos_Alpha_2 * Cos_Gamma_0) * Cos_Theta_1 + R_1 * R_3 * Cos_Alpha_2) * Sin_Theta_3 + 
((B_y * R_3 * Cos_Alpha_1 * Sin_Gamma_0 + B_x * R_3 * Cos_Alpha_1 * Cos_Gamma_0) * Sin_Theta_1 + (B_x * R_3 * Cos_Alpha_1 * Sin_Gamma_0 - B_y * R_3 * Cos_Alpha_1 * Cos_Gamma_0) * Cos_Theta_1 + (-d_1 - B_z) * R_3 * Sin_Alpha_1) * Cos_Theta_3 + 
((B_x * d_3 * Sin_Alpha_2 + B_y * R_2 * Cos_Alpha_1) * Sin_Gamma_0 + (B_x * R_2 * Cos_Alpha_1 - B_y * d_3 * Sin_Alpha_2) * Cos_Gamma_0) * Sin_Theta_1 + ((B_x * R_2 * Cos_Alpha_1 - B_y * d_3 * Sin_Alpha_2) * Sin_Gamma_0 + (-B_x * d_3 * Sin_Alpha_2 - B_y * R_2 * Cos_Alpha_1) * Cos_Gamma_0) * Cos_Theta_1 - d_3 * R_1 *
Sin_Alpha_2 + (-d_1 - B_z) * R_2 * Sin_Alpha_1)/(R_3 ** 2 * Cos_Alpha_2 ** 2 * Sin_Theta_3 ** 2 - 2.0 * d_3 * R_3 * Cos_Alpha_2 * Sin_Alpha_2 * Sin_Theta_3 + R_3 ** 2 * Cos_Theta_3 ** 2 + 2.0 * R_2 * R_3 * Cos_Theta_3 + d_3 ** 2 * Sin_Alpha_2 ** 2 + R_2 ** 2);

begin
  Theta_1 := Reals.Elementary_Functions.Arctan (Sin_Theta_1, Cos_Theta_1);
  Theta_2 := Reals.Elementary_Functions.Arctan (Sin_Theta_2, Cos_Theta_2);
end Kinematics.Inverse.Algebraic.Generic_Compute_12;
